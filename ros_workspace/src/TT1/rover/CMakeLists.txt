cmake_minimum_required(VERSION 3.0.2)
project(rover)

## Compile as C++11, supported in ROS Kinetic and newer
add_compile_options(-std=c++11)

## Find catkin macros and libraries
## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)
## is used, also find other catkin packages
find_package(catkin REQUIRED COMPONENTS
  roscpp
  visualization_msgs
  object_server
  tf
)

## System dependencies are found with CMake's conventions

##############################################################################
# Eigen
##############################################################################
#>>>>TODO: USE CMAKE MACRO TO ADD EIGEN LIB TO THIS PROJECT 
# find_package(Package_NAME REQUIRED)


## Uncomment this if the package has a setup.py. This macro ensures
## modules and global scripts declared therein get installed
## See http://ros.org/doc/api/catkin/html/user_guide/setup_dot_py.html
# catkin_python_setup()

################################################
## Declare ROS messages, services and actions ##
################################################

## Generate messages in the 'msg' folder
# add_message_files(
#   FILES
#   Message1.msg
#   Message2.msg
# )

## Generate services in the 'srv' folder
# add_service_files(
#   FILES
#   Service1.srv
#   Service2.srv
# )

## Generate actions in the 'action' folder
# add_action_files(
#   FILES
#   Action1.action
#   Action2.action
# )

## Generate added messages and services with any dependencies listed here
# generate_messages(
#   DEPENDENCIES
#   visualization_msgs
# )

###################################
## catkin specific configuration ##
###################################
## The catkin_package macro generates cmake config files for your package
## Declare things to be passed to dependent projects
## INCLUDE_DIRS: uncomment this if your package contains header files
## LIBRARIES: libraries you create in this project that dependent projects also need
## CATKIN_DEPENDS: catkin_packages dependent projects also need
## DEPENDS: system dependencies of this project that dependent projects also need
catkin_package(
  INCLUDE_DIRS include
  LIBRARIES #>>>>TODO: ADD THE NAME OF THE LIBRARY GENERATED BY THIS PACKAGE
  CATKIN_DEPENDS roscpp visualization_msgs object_server tf
#  DEPENDS system_lib
)

###########
## Build ##
###########

## Specify additional locations of header files
## Your package locations should be listed before other locations
include_directories(
  include
  ${catkin_INCLUDE_DIRS}
  ${EIGEN3_INCLUDE_DIR}
)

#####################
# Generate Library ##
#####################

## Declare a C++ library
add_library(${PROJECT_NAME}
  src/#>>>>TODO: ADD SOURCE FILE FOR THE Library
)

## Specify libraries to link our library against
target_link_libraries(${PROJECT_NAME}
  ${catkin_LIBRARIES}
)

#########################
# Generate Executables ##
#########################

add_executable(#>>>>TODO:ADD NODE NAME src/#>>>>TODO:ADD MAIN SOURCE FILE.cpp)

## Specify libraries to link our executable against
target_link_libraries(#>>>>TODO:ADD NODE NAME 
  ${catkin_LIBRARIES} 
  #>>>>TODO:LINK TO THE LIBRARY CREATED BEFORE
)

#############
## Install ##
#############

install(DIRECTORY include/${PROJECT_NAME}/
    DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}
    PATTERN "*_p.h" EXCLUDE
    PATTERN "*.h"
)

install(TARGETS turtle_ros_tutorial ${APP_TARGETS}
    ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
    LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
    RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
)